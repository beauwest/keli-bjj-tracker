BeauWest.BJJ_Tracker.Dashboard,
  db off,
  bp mode = 'edit',
  launchpad,
  menu,
  menuCaption 'BJJ Dashboard',
  icon 'kabaddi',
  caption(_browse) 'BJJ Dashboard',
  caption(_edit) 'BJJ Dashboard',
  lp {
    Chart_Range.displayValue = 'Last 30 days';
    updateStats();
  },
  du(e?.table?.endsWith('session') && __mode === 'client') updateStats(),
  reload(e?.table?.endsWith('session') && __mode === 'client') updateStats()

# region 'toolbar', bu
Add_Session,
  ac insert('Session')

Techniques,
  ac browse('Technique'),
  icon 'head-sync'

Sessions,
  ac browse('Session'),
  icon 'clipboard-text-outline'

Promotions,
  ac browse('Promotion'),
  icon 'chevron-triple-up'
#

--
# display, fontScale 2, color '900'
Total_All,
  string,
  db off,
  caption 'Mat Time'

Total_Gi,
  string,
  db off,
  caption 'Gi'

Total_NoGi,
  string,
  db off,
  caption 'NoGi'
#

-- 'Quick Stats'
Chart_Range,
  string,
  caption 'Range',
  optionList ['Last 7 days', 'Last 14 days', 'Last 30 days', 'Last 3 months', 'Last 6 months', 'Last 12 months', 'This Year', 'All time'],
  ac {
    resetParam('Hours_In_Range.displayValue');
    updateCharts();
  }

# display
Hours_In_Range,
  int,
  displayValue displayNumber(q(SELECT SUM(Minutes) / 60 FROM Session WHERE Start >= :dateTimeStamp(getChartStartingDate())) || '0')

First_Day,
  date,
  caption 'First day of BJJ',
  displayValue {
    const day = q(SELECT MIN(Start) FROM Session);
    if (day) {
      const duration = intervalToDuration({start: parseDateTime(day), end: dnow()});
      duration.days = duration.hours = duration.minutes = duration.seconds = 0;
      return `${formatDateStandard(day, 'MMM do, yyyy')} (${formatDuration(duration)})`;
    }
    return 'Start your journey today!';
  }

Last_Session,
  string,
  displayValue {
    const day = q(SELECT MAX(End) FROM Session);
    if (day) {
      return formatDistanceToNowStrict(day, {@addSuffix: true});
    }
    return 'None, yet.';
  },
  ac {
    const lastId = q(SELECT Id FROM Session ORDER BY End DESC LIMIT 1);
    if (lastId) {
      edit('Session', lastId);
    }
  }
#

--

Total_Mat_Time,
  caption 'Mat Time',
  lineChart,
  height 200,
  valueKeys [{name: 'hours', caption: 'Hours', color: '700', background: '100'}],
  labelKeys [{name: 'date'}],
  options {'scales': {'y': {'beginAtZero': false}}},
  data {
    const startingDate = _p->getChartStartingDate();
    const sessions = qk(WITH sessions AS (SELECT Minutes, LEFT(Start, 10) AS Date FROM Session WHERE Start >= :dateTimeStamp(startingDate))
                           SELECT
                             Date,
                             SUM(Minutes) / 60 AS Hours
                             FROM sessions
                             GROUP BY Date
                             ORDER BY Date DESC);
    const days = eachDayOfInterval({start: startingDate, end: parseDate('c')});

    const finalData = [];
    let cumulativeHours = q(SELECT SUM(Minutes) / 60 FROM Session WHERE Start < :dateTimeStamp(startingDate));
    for (const day of days) {
      cumulativeHours += sessions[dateStamp(day)] || 0;
      finalData.push({
        date: displayDate(day),
        hours: cumulativeHours
      });
    }
    return finalData;
  }

function updateStats() {
  const stats = qk(SELECT Style, SUM(Minutes) / 60 AS Hours FROM Session GROUP BY Style, {subscribe: true, prefetch: off});
  const gi = stats['Gi'] || 0;
  const noGi = stats['NoGi'] || 0;

  Total_Gi.displayValue = `${displayNumber(gi)} ${plural('hour', gi)}`;
  Total_NoGi.displayValue = `${displayNumber(noGi)} ${plural('hour', noGi)}`;
  Total_All.displayValue = `${displayNumber(gi + noGi)} ${plural('hour', gi + noGi)}`;
  resetParam('Hours_In_Range.displayValue');
  resetParam('First_Day.displayValue');
  resetParam('Last_Session.displayValue');

  updateCharts();
}

function updateCharts() {
  Total_Mat_Time->reloadData();
}

function getChartStartingDate() {
  const selectedValue = Chart_Range.displayValue;
  switch (selectedValue) {
    case 'Last 7 days':
      return subDays('c', 7);
    case 'Last 14 days':
      return subDays('c', 14);
    case 'Last 30 days':
      return subDays('c', 30);
    case 'Last 3 months':
      return subMonths('c', 3);
    case 'Last 6 months':
      return subMonths('c', 6);
    case 'Last 12 months':
      return subYears('c', 1);
    case 'This Year':
      return startOfYear('c');
    case 'All time':
      return parseDate(q(SELECT MIN(Start) FROM Session))
    default:
      return subDays('c', 30);
  }
}